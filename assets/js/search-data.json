{
  
    
        "post0": {
            "title": "A Good Start",
            "content": "Adding an Open in Colab Badge . For each notebook that you build out these are good sanity checks and usability, for instance to add a colab badge to the top of your notebooks so others may easily open and run from the browswer add this in a markdown block, . [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tljstewart/tljstewart/blob/master/_notebooks/2021-09-03-My-First-Blog-Post.ipynb) . of course change the url to point to your .ipynb file. . Working With Environments . Here you can run some starter sanity checks to make sure you have the correct enviornment, version and packages . import sys import os print(sys.version) !which python !python --version . 3.9.4 (default, Apr 9 2021, 09:32:38) [Clang 10.0.0 ] /Users/tljstewart/miniconda3/envs/ml39/bin/python Python 3.9.4 . Adding Conda Environment to Juypter-Lab . If you&#39;re using a conda virtual environment (like me) and Jupyter didn&#39;t pull in that environment when lauched (also, like me) follow these steps. . From the command line: . conda activate &lt;name-of-environment&gt; | conda install ipykernel | ipython kernel install --user --name=ml39 You must use the --user option, or it will install the kernel in the system path which is not the default for finding kernels, here I named my kernel ml39, the same as the name of my conda environment | . | jupyter-lab Start jupyter-lab | . | Now your conda environment should be accessible in juypter-lab and selectable as the kernel to use.I have more [^1] to say up here. . Working With Markdown . Here you can learn about useful markdown syntax, headers 1, 2 and 3 will create a cascading table of contents at the top of this notebook . Header 3 . header 2 . header 3 . bold . itlaics . code . Here is the markdown syntax to generate the formating above: . # header 1 . ## header 2 . ### header 3 . **bold** . *itlaics* . `code` . Videos and Twitter . Here is some special Jekyll sauce to embed urls, like twitter and youtube on the blog . This: . &gt; twitter: https://twitter.com/tljstewart/status/1291806901068607489?s=20 . &gt; youtube: https://youtu.be/Lu56xVlZ40M . Renders this: Seeker of esoteric&#39;s; pushing electrons eclectically about the multiverse, bringing life to the inorganic, intelligence to man and machine, and security for both #engineer #CyberSecurity #ArtificialIntelligence connect with me at https://t.co/VoLYIlhn5U pic.twitter.com/p56NykZf11 . &mdash; Timothy L.J. Stewart (@tljstewart) August 7, 2020 . Working With Latex . Perceptron Algorithm . First I will start with a perceptron algorithm written out, and then compare it to one from sklearn. The equation that this algorithm models is $h(x) = sign(( sum^{d}_{i=1}w_{i}x_{i}) + b)$ $h(x) = sign(w^{T}x)$ . h(x) represents the classification term, usually 1 or 0 depending on the sign | sign corresponds to &#8723; | $w_{i}$ is the weights vector | $x_{i}$ is the input vector | b is the threshold | . Convention is to treat b as another weight $w_{o}$, and include it in the weight vector. . Updating weights . If this was ran just once with initial weights there would be lots of incorrectly classified points, unless the initial weights were reandomly correct. Because of this we need to iterate over the weights and continuously update them untit there is no misclassification or the max iterations is reached. This is done by the formula below. $w(t+1) = w(t) + eta y_{d}(t) x(t)$ . $w(t+1)$ is the updated weights | $w(t)$ is the previous weights | $ eta$ is the learning rate | $y_{d}(t)$ is the difference in incorrect y values | $x(t)$ is the value of the inputs | . Working With Emojis . Typing emojis like I give this post two :+1:! will render this: . I give this post two :+1:! . :white_check_mark: Here is is gist of github favored emojies . Working with Call-Outs . Here is some special sauce for The Blog. . Typing &gt;Tip: a tip will render: . Tip: Here is some special sauce for The Blog. . Typing &gt;Important: some info will render: . Important: your info . Typing &gt;Warning: a warning will render: . Warning: your warning . Typing &gt; Note: a note will render: . Note: A doc link to an example website: fast.ai should also work fine. . Working With Images . Lets grab an image and resize it to use as a favicon on The Blog. . First lets install opencv from within the juypter-lab notebook using ! . !conda install -y -c conda-forge opencv . Collecting package metadata (current_repodata.json): done Solving environment: done # All requested packages already installed. . import cv2 import matplotlib.pyplot as plt from IPython.display import display, Image . %matplotlib inline #For prettier High-Def plots with more DPI %config InlineBackend.figure_format = &#39;retina&#39; . OpenCV reads images as BGR, we after cv2.imread we need to convert to RGB for sanity, also if you do this conversion you must also covert back to BGR for wrtite cv2.imwrite or it will save as a BGR image . Lets load the images and convert from BGR to RGB . img = cv2.imread(&quot;data/2021-09-03-My-First-Blog-Post/in/IMG_8866.PNG&quot;) img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) img_list = [img] #img_resize = cv2.resize(img,None,fx=0.25,fy=0.25,interpolation=cv2.INTER_AREA) . Since images are just numpy arrays, let crop it by slicing to make it a square image . img_resize = img[1226:,500:4500] . Now we can use OpenCV to resize the image, this is different than crop, as instead of cutting out cv2.resize will perform an interpolation in a neighbor of pixels to replace the higher resolution pixels with . print(img_resize.shape) img_list.append(img_resize) img_resize75 = cv2.resize(img_resize,(75,75),interpolation=cv2.INTER_LANCZOS4) img_resize16 = cv2.resize(img_resize,(16,16),interpolation=cv2.INTER_LANCZOS4) # the 16x16 and 75x75 turned out terrible lol . Display the results in a for loop, # the 16x16 and 75x75 turned out terrible lol sooooo lets not display those. . for image in img_list: plt.figure() plt.imshow(image) . Now we can write to disc and save these images, however you must call cv2.cvtColor on the image to convert it back to BGR for saving. . cv2.imwrite(&quot;data/2021-09-03-My-First-Blog-Post/out/favicon.png&quot;, cv2.cvtColor(img_resize, cv2.COLOR_RGB2BGR)) #convert back to RGB image cv2.imwrite(&quot;data/2021-09-03-My-First-Blog-Post/out/testbgrrgb.png&quot;, img) #no conversion, saves as BGR image cv2.imwrite(&quot;data/2021-09-03-My-First-Blog-Post/out/favicon16x16.PNG&quot;, cv2.cvtColor(img_resize16, cv2.COLOR_RGB2BGR)) . (4000, 4000, 3) . True . Displaying Images with Markdown . ![Artificial Intelligence Arm](data/2021-09-03-My-First-Blog-Post/res/ai-arm.jpeg &quot;AI&quot;) . . OR Use HTML, useful for setting width and height on images . &lt;img src=&quot;data/2021-09-03-My-First-Blog-Post/res/ai-arm.jpeg&quot; alt=&quot;Artificial Intelligence Arm&quot; width=&quot;200&quot; height=&quot;200&quot;&gt; . . Using Interactive Charts Altair . Lets generate some data and make a basic interative plot for The Blog. . !conda install -y -c conda-forge altair vega_datasets pandas #hide_output . import pandas as pd data = pd.DataFrame({&#39;a&#39;: list(&#39;CCCDDDEEE&#39;), &#39;b&#39;: [2, 7, 4, 1, 2, 6, 8, 4, 7]}) import altair as alt from vega_datasets import data cars = data.cars.url chart = alt.Chart(cars).mark_point().encode( x=&#39;Horsepower:Q&#39;, y=&#39;Miles_per_Gallon:Q&#39;, color=&#39;Origin:N&#39;, ) . Assignment operations don&#39;t trigger the notebook’s auto display mechanism, we need to call the assigned plot, chart . chart . Footnotes . Site Generator Footnotes . This site generator syntax: . { % fn 20 %} . without the , adds a linked superscript 20 where you place it. . This site generator syntax: . { { &#39;This is the actual footnote; with a [link to Fastai docs](https://github.com/fastai/fastpages/blob/master/_fastpages_docs/NOTEBOOK_FOOTNOTES.md) as well! and a single quote &#39; too!&#39; | fndetail: 20 } } . without the 4 adds the footer below. . 20. This is the actual footnote; with a link to Fastai docs as well! and a single quote &#39; too!↩ . Markdown Footnotes . Another way to add footnotes, however seemingly less reliable across cells is by using this markdown syntax [^1] at the point of reference, then again in the footer section [^1]: To say down here . I have more 1 to say up here. . I have even more 2 to say up here. . . more to say down here.&#8617; . | even more to say down here.&#8617; . | However, these markdown footnotes [^2] footnotes don&#39;t seem to work across cells: . . As you can see it doesn&#39;t show up down here: . .",
            "url": "https://tljstewart.github.io/https://tljstewart.github.io/fastpages/jupyter/blogging/python/2021/09/03/My-First-Blog-Post.html",
            "relUrl": "/fastpages/jupyter/blogging/python/2021/09/03/My-First-Blog-Post.html",
            "date": " • Sep 3, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tljstewart.github.io/https://tljstewart.github.io/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tljstewart.github.io/https://tljstewart.github.io/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Timothy Stewart, I am currently a Research Engineer at Signature Research Inc. as well as a PhD candidate in Artificial Intelligence at the Institute for Human Machine Cognition - University of West Florida joint program located in Pensacola, Florida. In my freetime I enjoy drone videography and photography, creating content for The Blog and YouTube and keeping it balanced by running it all off on the sandy white beaches where I live. .",
          "url": "https://tljstewart.github.io/https://tljstewart.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Authoring",
          "content": "My name is Timothy Stewart, I am currently a Research Engineer at Signature Research Inc. as well as a PhD candidate in Artificial Intelligence at the Institute for Human Machine Cognition - University of West Florida joint program located in Pensacola, Florida. In my freetime I enjoy drone videography and photography, creating content for The Blog and YouTube and keeping it balanced by running it all off on the sandy white beaches where I live. . C. Tate, K. Francis and T.L.J Stewart, “Model-Free Reinforcement Learning for Static Point Source Localization in a 3D Simulation.,” 2021. | B. Shaer and T.L.J Stewart, “Intelligent Computer Vision Tracking and Embedded Microcontroller in the Sporting Domain.,” in International Conference on Image Processing, Computer Vision, &amp; Pattern Recognition, 2018. | .",
          "url": "https://tljstewart.github.io/https://tljstewart.github.io/authoring/",
          "relUrl": "/authoring/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Education",
          "content": "My name is Timothy Stewart, I am currently a Research Engineer at Signature Research Inc. as well as a PhD candidate in Artificial Intelligence at the Institute for Human Machine Cognition - University of West Florida joint program located in Pensacola, Florida. In my freetime I enjoy drone videography and photography, creating content for The Blog and YouTube and keeping it balanced by running it all off on the sandy white beaches where I live. .",
          "url": "https://tljstewart.github.io/https://tljstewart.github.io/education/",
          "relUrl": "/education/",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Research",
          "content": "My name is Timothy Stewart, I am currently a Research Engineer at Signature Research Inc. as well as a PhD candidate in Artificial Intelligence at the Institute for Human Machine Cognition - University of West Florida joint program located in Pensacola, Florida. In my freetime I enjoy drone videography and photography, creating content for The Blog and YouTube and keeping it balanced by running it all off on the sandy white beaches where I live. .",
          "url": "https://tljstewart.github.io/https://tljstewart.github.io/research/",
          "relUrl": "/research/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tljstewart.github.io/https://tljstewart.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}